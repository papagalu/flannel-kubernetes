---
- name: Kubernetes Master | Register kube-apiserver
  blockinfile:
    path: /etc/systemd/system/kube-apiserver.service
    create: yes
    block: |
      [Unit]
      Description=Kubernetes API Server
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes
      [Service]
      ExecStart=/usr/bin/kube-apiserver \
        --bind-address=0.0.0.0 \
        --service-cluster-ip-range={{ kubernetes_cluster_info.SERVICE_CLUSTER_IP_RANGE }} \
        --address=0.0.0.0 \
        --etcd-servers=http://127.0.0.1:2379 \
        --v=2 \
        --insecure-bind-address={{ host_public_ip }} \
        --allow-privileged=true \
        --anonymous-auth=false \
        --secure-port=443 \
        --advertise-address={{ host_internal_ip }} \
        --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \
        --tls-cert-file={{ kubernetes_certificates.directory }}/apiserver.pem \
        --tls-private-key-file={{ kubernetes_certificates.directory }}/apiserver-key.pem \
        --client-ca-file={{ kubernetes_certificates.directory }}/ca.pem \
        --service-account-key-file={{ kubernetes_certificates.directory }}/apiserver-key.pem \
        --runtime-config=extensions/v1beta1=true,extensions/v1beta1/networkpolicies=true,batch/v2alpha1=true \
        --requestheader-allowed-names= \
        --requestheader-client-ca-file={{ kubernetes_certificates.directory }}/front-proxy-ca.pem \
        --requestheader-extra-headers-prefix=X-Remote-Extra- \
        --requestheader-group-headers=X-Remote-Group \
        --requestheader-username-headers=X-Remote-User \
        --proxy-client-cert-file={{ kubernetes_certificates.directory }}/front-proxy-client.pem \
        --proxy-client-key-file={{ kubernetes_certificates.directory }}/front-proxy-key-client.pem
      Restart=on-failure
      RestartSec=10
      WorkingDirectory=/root/
      [Install]
      WantedBy=multi-user.target

- name: Kubernetes Master | Register kube-controller-manager
  blockinfile:
    path: /etc/systemd/system/kube-controller-manager.service
    create: yes
    block: |
      [Unit]
      Description=Kubernetes Controller Manager
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes
      [Service]
      ExecStart=/usr/bin/kube-controller-manager \
        --allocate-node-cidrs \
        --master={{ host_public_ip }}:8080 \
        --v=2 \
        --cluster-cidr={{ kubernetes_cluster_info.CLUSTER_SUBNET }} \
        --service-account-private-key-file={{ kubernetes_certificates.directory }}/apiserver-key.pem \
        --root-ca-file={{ kubernetes_certificates.directory }}/ca.pem \
        --cluster-signing-cert-file={{ kubernetes_certificates.directory }}/ca.pem \
        --cluster-signing-key-file={{ kubernetes_certificates.directory }}/ca-key.pem
      Restart=on-failure
      RestartSec=10
      [Install]
      WantedBy=multi-user.target

- name: Kubernetes Master | Register kube-scheduler
  blockinfile:
    path: /etc/systemd/system/kube-scheduler.service
    create: yes
    block: |
      [Unit]
      Description=Kubernetes Scheduler
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes
      [Service]
      ExecStart=/usr/bin/kube-scheduler \
        --master={{ host_public_ip }}:8080 \
        --v=2 \
        --leader-elect=true
      Restart=on-failure
      RestartSec=10
      [Install]
      WantedBy=multi-user.target

- name: Kubernetes Master | Register kube-proxy
  blockinfile:
    path: /etc/systemd/system/kube-proxy.service
    create: yes
    block: |
      [Unit]
      Description=Kubernetes Proxy
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes
      [Service]
      ExecStart=/usr/bin/kube-proxy \
        --kubeconfig /etc/kubernetes/kubeconfig.yaml \
        --cluster-cidr {{ kubernetes_cluster_info.CLUSTER_SUBNET }}
      Restart=on-failure
      RestartSec=10
      [Install]
      WantedBy=multi-user.target

- name: Kubernetes Minion | Start kube-proxy
  service:
    name: "kube-proxy"
    enabled: yes
    state: restarted
    daemon_reload: yes
  changed_when: false

- name: Kubernetes Master | Register etcd3
  blockinfile:
    path: /etc/systemd/system/etcd3.service
    create: yes
    block: |
      [Unit]
      Description=Etcd store
      Documentation=https://github.com/coreos/etcd
      [Service]
      ExecStartPre=-/usr/bin/docker rm -f etcd
      ExecStart=/usr/bin/docker run --name etcd \
        --net=host \
        --volume /var/etcd:/var/etcd \
        quay.io/coreos/etcd:v{{ kubernetes_cluster_info.ETCD_VERSION }} \
          /usr/local/bin/etcd \
          --data-dir /var/etcd/data
      Restart=on-failure
      RestartSec=10
      [Install]
      WantedBy=multi-user.target

- name: Kubernetes Master | Assume that the certs were not generated now
  set_fact:
    certs_generated: false

- name: Kubernetes Master | Check if all the certs are present
  block:
    - stat:
        path: "{{ kubernetes_certificates.directory }}/ca.pem"
      register: ca_cert

    - stat:
        path: "{{ kubernetes_certificates.directory }}/ca-key.pem"
      register: ca_cert_key

    - stat:
        path: "{{ kubernetes_certificates.directory }}/apiserver.pem"
      register: apiserver_cert

    - stat:
        path: "{{ kubernetes_certificates.directory }}/apiserver-key.pem"
      register: apiserver_cert_key

    - stat:
        path: "{{ kubernetes_certificates.directory }}/admin.pem"
      register: admin_cert

    - stat:
        path: "{{ kubernetes_certificates.directory }}/admin-key.pem"
      register: admin_cert_key

- name: Kubernetes Master | Generate certs if needed
  block:
    - include_tasks: ./generate_certs_master.yml

    - set_fact:
        certs_generated: true
  when: (not ca_cert.stat.exists or
         not ca_cert_key.stat.exists or
         not apiserver_cert.stat.exists or
         not apiserver_cert_key.stat.exists or
         not admin_cert.stat.exists or
         not admin_cert_key.stat.exists)

- name: Kubernetes Master | Fetching certificates on the ansible host
  fetch:
    flat: yes
    src: "{{ kubernetes_certificates.directory }}/{{ item }}"
    dest: "{{ ansible_tmp_dir }}/k8s_{{ item }}"
  with_items:
    - ca.pem
    - ca-key.pem

- name: Kubernetes Master | Creating kubeconfig
  blockinfile:
    path: /etc/kubernetes/kubeconfig.yaml
    create: yes
    block: |
      apiVersion: v1
      kind: Config
      clusters:
      - cluster:
          certificate-authority: {{ kubernetes_certificates.directory }}/ca.pem
          server: https://{{ host_public_ip }}
        name: local
      users:
      - name: kubelet
        user:
          client-certificate: {{ kubernetes_certificates.directory }}/node.pem
          client-key: {{ kubernetes_certificates.directory }}/node-key.pem
      contexts:
      - context:
          cluster: local
          user: kubelet
        name: kubelet-context
      current-context: kubelet-context

- name: Kubernetes Master | Create service kubelet
  blockinfile:
    path: /etc/systemd/system/kubelet.service
    create: yes
    block: |
      [Unit]
      Description=Kubelet Server
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes
      [Service]
      ExecStart=/usr/bin/kubelet \
        --network-plugin=cni \
        --allow-privileged=true \
        --hostname-override={{ ansible_hostname }} \
        --cni-bin-dir=/opt/cni/bin \
        --cni-conf-dir=/etc/cni/net.d \
        --cluster-dns={{ kubernetes_cluster_info.K8S_DNS_SERVICE_IP }} \
        --cluster-domain={{ kubernetes_cluster_info.K8S_DNS_DOMAIN }} \
        --kubeconfig=/etc/kubernetes/kubeconfig.yaml \
        --tls-cert-file={{ kubernetes_certificates.directory }}/node.pem \
        --tls-private-key-file={{ kubernetes_certificates.directory }}/node-key.pem \
        --fail-swap-on=false
      Restart=on-failure
      RestartSec=10
      WorkingDirectory=/root/
      [Install]
      WantedBy=multi-user.target

- name: Kubernetes Minion | Start kubelet
  service:
    name: "kubelet"
    enabled: yes
    state: restarted
    daemon_reload: yes
  changed_when: false

- name: Kubernetes Master | Restart all services
  service:
    name: "{{item}}"
    enabled: yes
    state: restarted
    daemon_reload: yes
  with_items:
    - etcd3
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler
    - kubelet
    - kube-proxy
  changed_when: false

- name: Kubernetes Master | Create CNI binaries folder
  file:
    path: "/opt/cni/bin"
    state: directory
    mode: 0755

- name: Kubernetes Master | Get cni archive
  get_url:
    url: "{{kubernetes_binaries_info.cni_linux_download_link}}"
    dest: "/opt/cni/bin/cni.tgz"
    force_basic_auth: yes
    timeout: 30
  retries: 3

- name: Kubernetes Master | Unarchive tar.gz
  unarchive:
    src: "/opt/cni/bin/cni.tgz"
    dest: "/opt/cni/bin/"
    remote_src: yes

- name: Kubernetes Master | Setting kubectl context
  shell: |
    set -o errexit
    kubectl config set-cluster default-cluster --server=https://{{ host_public_ip }} --certificate-authority={{ kubernetes_certificates.directory }}/ca.pem
    kubectl config set-credentials default-admin --certificate-authority={{ kubernetes_certificates.directory }}/ca.pem --client-key={{ kubernetes_certificates.directory }}/admin-key.pem --client-certificate={{ kubernetes_certificates.directory }}/admin.pem
    kubectl config set-context local --cluster=default-cluster --user=default-admin
    kubectl config use-context local
  changed_when: false


- name: Kubernetes Master | Waiting for kube-apiserver to start
  block:
    - name: Kubernetes Master | Running kubectl version
      shell: kubectl version
      changed_when: false
      register: kubeapiserver_ready
      until: kubeapiserver_ready.rc == 0
      retries: 30
      delay: 3
  rescue:
    - fail:
        msg: Kubernetes API server could not reach ready status, check the service log

- name: Kubernetes Master | Fetch Token
  shell: kubectl describe secret $(kubectl get secrets | grep default | cut -f1 -d ' ') | grep -E '^token' | cut -f2 -d':' | tr -d '\t'
  changed_when: false
  register: fetch_token
  until: fetch_token.stdout | trim != ""
  retries: 10
  delay: 3

- name: Kubernetes Master | Register Token
  set_fact:
    TOKEN: "{{fetch_token.stdout | trim}}"

- name: Kubernetes Master | Checking Token
  fail:
      msg: Could not fetch Token, make sure kubectl can connect to the API server
  when: TOKEN == ""

- name: Kubernetes Master | Ensure /etc/hosts is updated
  lineinfile:
    path: /etc/hosts
    line: "{{ host_public_ip }} {{ ansible_hostname }}"

- name: Kubernetes Master | Create test yamls
  blockinfile:
    path: /root/apache-pod.yaml
    create: yes
    marker: "# {mark} Ansible automatic example generation"
    block: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: apachetwin
        labels:
          name: webserver
      spec:
        containers:
        - name: apachetwin
          image: fedora/apache
        nodeSelector:
          beta.kubernetes.io/os: linux
- name: Create test yamls
  blockinfile:
    path: /root/apache-e-w.yaml
    create: yes
    marker: "# {mark} Ansible automatic example generation"
    block: |
      apiVersion: v1
      kind: Service
      metadata:
        labels:
          name: apacheservice
          role: service
        name: apacheservice
      spec:
        ports:
          - port: 8800
            targetPort: 80
            protocol: TCP
            name: tcp
        selector:
          name: webserver
- name: Create test yamls
  blockinfile:
    path: /root/apache-n-s.yaml
    create: yes
    marker: "# {mark} Ansible automatic example generation"
    block: |
      apiVersion: v1
      kind: Service
      metadata:
        labels:
          name: apacheexternal
          role: service
        name: apacheexternal
      spec:
        ports:
          - port: 8800
            targetPort: 80
            protocol: TCP
            name: tcp
        selector:
          name: webserver
        type: NodePort
- name: Create test yamls
  blockinfile:
    path: /root/nginx-pod.yaml
    create: yes
    marker: "# {mark} Ansible automatic example generation"
    block: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: nginxtwin
        labels:
          name: webserver
      spec:
        containers:
        - name: nginxtwin
          image: nginx
        nodeSelector:
          beta.kubernetes.io/os: linux
