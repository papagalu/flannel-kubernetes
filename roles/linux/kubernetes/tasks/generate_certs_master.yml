---
- name: Kubernetes Certs | Create temp folder
  file:
    path: "{{ kubernetes_certificates.tmp_generate_path }}"
    state: directory
    mode: 0755

- name: Kubernetes Certs | Create make-certs
  lineinfile:
    path: "{{ kubernetes_certificates.tmp_generate_path }}/make-certs"
    create: yes
    mode: 0755
    line: |
      #!/bin/bash -

      set -o errexit
      set -o nounset
      set -o pipefail

      cert_group=kube-cert
      cert_dir={{ kubernetes_certificates.directory }}

      pem_ca=$cert_dir/ca.pem
      pem_ca_key=$cert_dir/ca-key.pem
      pem_server=$cert_dir/apiserver.pem
      pem_server_key=$cert_dir/apiserver-key.pem
      pem_server_csr=$cert_dir/apiserver-csr.pem

      pem_admin=$cert_dir/admin.pem
      pem_admin_key=$cert_dir/admin-key.pem
      pem_admin_csr=$cert_dir/admin-csr.pem

      # Make sure cert group exists
      [ $(getent group $cert_group) ] || groupadd -r $cert_group

      # Generate TLS artifacts
      mkdir -p "$cert_dir"
      rm -rf "$cert_dir/*"

      openssl genrsa -out $pem_ca_key 2048
      openssl req -x509 -new -nodes -key $pem_ca_key -days 10000 -out $pem_ca -subj "/CN=kube-ca"

      openssl genrsa -out $pem_server_key 2048
      openssl req -new -key $pem_server_key -out $pem_server_csr -subj "/CN={{ansible_hostname}}" -config openssl.cnf
      openssl x509 -req -in $pem_server_csr -CA $pem_ca -CAkey $pem_ca_key -CAcreateserial -out $pem_server -days 365 -extensions v3_req -extfile openssl.cnf

      # Make server certs accessible to apiserver.
      chgrp $cert_group $pem_ca $pem_ca_key $pem_server $pem_server_key
      chmod 600 $pem_ca_key $pem_server_key
      chmod 660 $pem_ca $pem_server

      # Generate admin
      openssl genrsa -out $pem_admin_key 2048
      openssl req -new -key $pem_admin_key -out $pem_admin_csr -subj "/CN=kube-admin"
      openssl x509 -req -in $pem_admin_csr -CA $pem_ca -CAkey $pem_ca_key -CAcreateserial -out $pem_admin -days 365

- name: Kubernetes Certs | Create openssl.cnf
  lineinfile:
    path: "{{ kubernetes_certificates.tmp_generate_path }}/openssl.cnf"
    create: yes
    line: |
      [req]
      req_extensions = v3_req
      distinguished_name = req_distinguished_name
      [req_distinguished_name]
      [ v3_req ]
      basicConstraints = CA:FALSE
      keyUsage = nonRepudiation, digitalSignature, keyEncipherment
      subjectAltName = @alt_names
      [alt_names]
      DNS.1 = kubernetes
      DNS.2 = kubernetes.default
      DNS.3 = kubernetes.default.svc
      DNS.4 = kubernetes.default.svc.{{ kubernetes_cluster_info.K8S_DNS_DOMAIN }}
      IP.1 = {{ kubernetes_cluster_info.K8S_API_SERVICE_IP }}
      IP.2 = {{ host_internal_ip }}

- name: Kubernetes Certs | Remove existing kubernetes certs
  file:
    path: /etc/kubernetes
    state: absent

- name: Kubernetes Certs | Create kubernetes certs folder
  file:
    path: /etc/kubernetes
    state: directory
    mode: 0755

- name: Kubernetes Certs | Generating Certificates
  shell: |
    set -o errexit
    cd {{ kubernetes_certificates.tmp_generate_path }}
    ./make-certs

- name: Kubernetes Certs | Removing temp directory
  file:
    path: "{{ kubernetes_certificates.tmp_generate_path }}"
    state: absent

- name: K8s Client Certificates | Include vars
  include_vars: "{{ ansible_distribution | lower }}.yml"

- name: K8s Client Certificates | Assume client certs are not missing
  set_fact:
    k8s_client_certs_missing: false

- name: K8s Client Certificates | Verify if all the client certs are present
  block:
    - name: K8s Client Certificates | Get the client cert file stat
      stat:
        path: "{{ kubernetes_certificates.directory }}/node.pem"
      register: client_cert

    - name: K8s Client Certificates | Get the client cert key file stat
      stat:
        path: "{{ kubernetes_certificates.directory }}/node-key.pem"
      register: client_cert_key

    - name: K8s Client Certificates | Set the "k8s_client_certs_missing" flag if either cert or cert key is missing
      set_fact:
        k8s_client_certs_missing: true
      when: not client_cert.stat.exists or not client_cert_key.stat.exists

- name: K8s Client Certificates | Generate client certificates
  block:
    - name: K8s Client Certificates | Remove the tmp certs directory if exists
      file:
        path: "{{ kubernetes_certificates.tmp_generate_path }}"
        state: absent

    - name: K8s Client Certificates | Create the tmp certs directory
      file:
        path: "{{ kubernetes_certificates.tmp_generate_path }}"
        state: directory
        mode: "u=rwx,g=rx,o=rx"

    - name: K8s Client Certificates | Create the make-certs bash script
      lineinfile:
        path: "{{ kubernetes_certificates.tmp_generate_path }}/make-certs"
        mode: "u=rwx,g=rx,o=rx"
        create: yes
        line: |
          #!/bin/bash -

          set -o errexit
          set -o nounset
          set -o pipefail

          cert_group=kube-cert
          cert_dir="{{ kubernetes_certificates.directory }}"

          mkdir -p "$cert_dir"
          rm -rf "$cert_dir/*"

          pem_ca=$cert_dir/ca.pem
          pem_ca_key=$cert_dir/ca-key.pem

          front_proxy_ca=$cert_dir/front-proxy-ca.pem

          pem_node=$cert_dir/node.pem
          pem_node_key=$cert_dir/node-key.pem
          pem_node_csr=$cert_dir/node-csr.pem

          front_proxy_client=$cert_dir/front-proxy-client.pem
          front_proxy_key_client=$cert_dir/front-proxy-key-client.pem
          front_proxy_csr_client=$cert_dir/front-proxy-csr-client.pem

          # Make sure cert group exists
          [ $(getent group $cert_group) ] || groupadd -r $cert_group

          openssl req -x509 -new -nodes -key $pem_ca_key -days 10000 -out $front_proxy_ca -subj "/CN=kube-ca"

          # Make sure perms are right
          chgrp $cert_group $pem_ca $pem_ca_key $front_proxy_ca
          chmod 600 $pem_ca_key
          chmod 660 $pem_ca
          chmod 660 $front_proxy_ca

          # Generate TLS artifacts node
          openssl genrsa -out $pem_node_key 2048
          openssl req -new -key $pem_node_key -out $pem_node_csr -subj "/CN={{ ansible_hostname }}" -config openssl.cnf
          openssl x509 -req -in $pem_node_csr -CA $pem_ca -CAkey $pem_ca_key -CAcreateserial -out $pem_node -days 365 -extensions v3_req -extfile openssl.cnf

          # Generate TLS for front-proxy
          openssl genrsa -out $front_proxy_key_client 2048
          openssl req -new -key $front_proxy_key_client -out $front_proxy_csr_client -subj "/CN={{ ansible_hostname }}" -config openssl.cnf
          openssl x509 -req -in $front_proxy_csr_client -CA $front_proxy_ca -CAkey $pem_ca_key -CAcreateserial -out $front_proxy_client -days 365 -extensions v3_req -extfile openssl.cnf

          # Make server certs accessible to apiserver.
          chgrp $cert_group $pem_node $pem_node_key $front_proxy_client $front_proxy_key_client
          chmod 600 $pem_node_key
          chmod 660 $pem_node $pem_ca
          chmod 660 $front_proxy_key_client $front_proxy_client
          chmod 660 $front_proxy_ca

    - name: K8s Client Certificates | Create the openssl conf for certs generation
      lineinfile:
        path: "{{ kubernetes_certificates.tmp_generate_path }}/openssl.cnf"
        create: yes
        line: |
          [req]
          req_extensions = v3_req
          distinguished_name = req_distinguished_name
          [req_distinguished_name]
          [ v3_req ]
          basicConstraints = CA:FALSE
          keyUsage = nonRepudiation, digitalSignature, keyEncipherment
          subjectAltName = @alt_names
          [alt_names]
          IP.1 = {{ ansible_default_ipv4.address }}

    - name: K8s Client Certificates | Generate k8s client certificates for the current machine
      shell: ./make-certs
      args:
        executable: /bin/bash
        chdir: "{{ kubernetes_certificates.tmp_generate_path }}"

    - name: K8s Client Certificates | Remove tmp dir for certs generation
      file:
        path: "{{ kubernetes_certificates.tmp_generate_path }}"
        state: absent
  when: k8s_client_certs_missing or certs_generated
